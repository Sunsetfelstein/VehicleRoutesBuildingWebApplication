@model List<VehicleRoutesBuildingWebApplication.Models.HomeViewModels.PointViewModel>
@{
        ViewData["Title"] = "Стартовая страница";
}

<div style="display: flex; flex-direction: column; height: 80vh;">
  <div style="flex: 1; position: relative;">
    <div id="map-main" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0;"></div>
    <div style="position: absolute; bottom: 10px; right: 10px; display: flex; flex-direction: row-reverse; justify-content: flex-end;">
      <button type="submit" id="resultBtn" class="btn btn-primary" style="margin-left: 10px; width: 200px; color: black; background-color: white; border-color: black;">Сохранить результаты</button>
      <button type="submit" id="routeBtn" class="btn btn-primary" style="width: 200px; color: black; background-color: white; border-color: black;">Создать маршруты</button>
    </div>
  </div>
</div>

<script src="https://api-maps.yandex.ru/2.1/?apikey=a411f927-83b0-4fe6-ba1d-ebce6259b35c&lang=ru_RU"></script>

<script>
    ymaps.ready(init);

            async function init() {
                var myPlacemark,
                map = new ymaps.Map(document.getElementById('map-main'), {
                center: [54.735152, 55.958736],
                zoom: 7
            });

            

            map.events.add('click', function (e) {
                var coords = e.get('coords');
    
                // Если метка уже создана – просто передвигаем ее.
                if (myPlacemark) {
                    myPlacemark.geometry.setCoordinates(coords);
                }
                // Если нет – создаем.
                else {
                    myPlacemark = createPlacemark(coords);
                    map.geoObjects.add(myPlacemark);
                    // Слушаем событие окончания перетаскивания на метке.
                    myPlacemark.events.add('dragend', function () {
                        getAddress(myPlacemark.geometry.getCoordinates());
                    });
                }
                getAddress(coords);
            });
    
            function createPlacemark(coords) {
                return new ymaps.Placemark(coords, {
                    iconCaption: 'поиск...'
                }, {
                    preset: 'islands#violetDotIconWithCaption',
                    draggable: true
                });
            }
    
            function getAddress(coords) {
                myPlacemark.properties.set('iconCaption', 'поиск...');
                ymaps.geocode(coords).then(function (res) {
                    var firstGeoObject = res.geoObjects.get(0),
                        address = firstGeoObject.getAddressLine();
                        coord = firstGeoObject.geometry.getCoordinates();
    
                    myPlacemark.properties
                        .set({
                            // Формируем строку с данными об объекте.
                            iconCaption: [
                                // Название населенного пункта или вышестоящее административно-территориальное образование.
                                firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),
                                // Получаем путь до топонима, если метод вернул null, запрашиваем наименование здания.
                                firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()
                            ].filter(Boolean).join(', '),
                            // В качестве контента балуна задаем строку с адресом объекта.
                            balloonContent: address
                        });
                });
            }

        var points = [];

        const vehicleCapacity = 2000;
    
        @foreach (var point in Model)
        {
            <text>
                var isDepot = "@point.IsDepot" === "True" ? true : false;
                var clientMark = new ymaps.Placemark([@point.Location.Coordinate.Latitude.ToString().Replace(',','.'), 
                @point.Location.Coordinate.Longitude.ToString().Replace(',','.')], {
                    iconCaption: "@point.Name"
                }, {
                preset: isDepot ? 'islands#nightDotIcon' : 'islands#violetDotIconWithCaption',
                    draggable: true
                });

                var point = {
                    Name: "@point.Name",
                    PhoneNumber: "@point.PhoneNumber",
                    ProductWeight: @point.ProductWeight,
                    Latitude: @point.Location.Coordinate.Latitude.ToString().Replace(',','.'),
                    Longitude: @point.Location.Coordinate.Longitude.ToString().Replace(',','.'),
                    Mark: clientMark,
                    IsDepot: isDepot
                };

                map.geoObjects.add(clientMark);
                points.push(point);
            </text>
        };   

        let button = document.getElementById('routeBtn');
        button.addEventListener('click', distribClientsByDepo);      

        function containsObject(obj, list) {
            var i;
            for (i = 0; i < list.length; i++) {
                if (list[i] === obj) {
                    return true;
                }
            }

            return false;
        }

        async function distribClientsByDepo(){

            let distanceArray = await fillDistanceArray();

            let depotIndexes = [];

            let depotsWithClients = [];

            for(let i = 0; i < points.length; i++){
                if(points[i].IsDepot)
                {
                    depotIndexes.push(i)

                    var depotWithClients = {
                    Name: points[i].Name,
                    Mark: points[i].Mark,
                    Longitude: points[i].Longitude,
                    Latitude: points[i].Latitude,
                    Index: i,
                    Clients: []
                    };

                    depotsWithClients.push(depotWithClients);
                }
            }

            for(let i = 0; i < points.length; i++)
            {
                if (!containsObject(i, depotIndexes)) {
                    let min = 1000000;
                    let depotIndex = 0;
                    for(let j = 0; j < depotsWithClients.length; j++)
                    {
                        let distance =  distanceArray[i][depotsWithClients[j].Index];
                        if(distance < min)
                        {
                            min = distance;
                            depotIndex = j;
                        }
                    }

                    var client = {
                        Name: points[i].Name,
                        PhoneNumber: points[i].PhoneNumber,
                        ProductWeight: points[i].ProductWeight,
                        Latitude: points[i].Latitude,
                        Longitude: points[i].Longitude,
                        Mark: points[i].Mark,
                        Index: i
                    };
                    depotsWithClients[depotIndex].Clients.push(client);
                }
            }

            createRationalRoutes(depotsWithClients, distanceArray);    
            
            
        }

        function createRationalRoutes(depotsWithClients, distanceArray){

            for(let j = 0; j < depotsWithClients.length; j++){
                let depot = depotsWithClients[j];

                let vehicles = distributeClients(depot.Clients, vehicleCapacity, depot);

                for(let i = 0; i < vehicles.length; i++){

                    let vehicle = vehicles[i];

                    let clients = vehicle.Clients;
                    
                    let refundClients = getRefundClients(clients)

                    for(let k = 0; k < refundClients.length; k++){
                        refundClients[k].Mark.options.set('iconColor', '#ff0000');
                    }

                    let deliveryClients = getDeliveryClients(refundClients, clients);    
                    
                    for(let k = 0; k < deliveryClients.length; k++){
                        deliveryClients[k].Mark.options.set('iconColor', "#00FF00");
                    }

                    var finalRoute = calculateRationalRouteForVehicle(depot, deliveryClients, refundClients, distanceArray, 100);

                    createOnMap(finalRoute);

                    let t = 0;
                }
            }
        }

        function createOnMap(route){
            // Создаем массив с координатами точек маршрута
            var coordinates = [];
            for (var i = 0; i < route.length; i++) {
                var placemarkCoords = route[i].Mark.geometry.getCoordinates();
                coordinates.push(placemarkCoords);
            }

            // Создаем мультимаршрут
            var multiRoute = new ymaps.multiRouter.MultiRoute({
                // Указываем точки маршрута
                referencePoints: coordinates,
                // Устанавливаем тип маршрута (auto - автомобильный маршрут, masstransit - общественный транспорт, pedestrian - пешеходный маршрут)
                type: "auto"
            }, {
                // Внешний вид путевых точек.
                wayPointStartIconColor: "#FFFFFF",
                wayPointStartIconFillColor: "#B3B3B3",
                // Внешний вид линии активного маршрута.
                routeActiveStrokeWidth: 8,
                routeActiveStrokeStyle: 'solid',
                routeActiveStrokeColor: getRandomColor(),
                // Внешний вид линий альтернативных маршрутов.
                routeStrokeStyle: 'dot',
                routeStrokeWidth: 3,
                boundsAutoApply: true,
                // Отключаем отображение иконок
                wayPointVisible: false
            });

            // Добавляем мультимаршрут на карту
            map.geoObjects.add(multiRoute);

            // Устанавливаем границы отображения карты
            multiRoute.model.events.add("requestsuccess", function () {
                var activeRoute = multiRoute.getActiveRoute();
                if (activeRoute && activeRoute.getBounds()) { // проверяем, что координаты маршрута существуют
                    map.setBounds(activeRoute.getBounds(), { checkZoomRange: true });
                }
            });
        }

        function getRandomColor() {
            const letters = "0123456789ABCDEF";
            let color = "#";
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        function calculateRationalRouteForVehicle(depot, deliveryClients, refundClients, distanceArray, iteration){
            let route = buildRouteFromDepotToDepot(depot, deliveryClients, refundClients);

            let routeLength = getRouteLength(route, distanceArray);

            for(let i = 0; i < iteration; i++){
                for(let j = 0; j < 5; j++){

                    let deliveryClientOrderList = swapRandom(deliveryClients);

                    let deliveryClientOrderRoute  = buildRouteFromDepotToDepot(depot, deliveryClientOrderList, refundClients);

                    let deliveryClientOrderRouteLength = getRouteLength(deliveryClientOrderRoute, distanceArray);

                    let refundClientOrderList = swapRandom(refundClients);

                    let deliveryAndRefundClientOrderRoute  = buildRouteFromDepotToDepot(depot, deliveryClientOrderList, refundClientOrderList);

                    let deliveryAndRefundClientOrderRouteLength = getRouteLength(deliveryAndRefundClientOrderRoute, distanceArray);

                    if(deliveryAndRefundClientOrderRouteLength > deliveryClientOrderRouteLength && deliveryAndRefundClientOrderRouteLength > routeLength){
                        route = deliveryAndRefundClientOrderRoute;
                        deliveryClients = deliveryClientOrderList;
                        refundClients = refundClientOrderList;
                    }

                     if(deliveryClientOrderRouteLength > deliveryAndRefundClientOrderRouteLength && deliveryClientOrderRouteLength > routeLength){
                        route = deliveryClientOrderRouteLength;
                        deliveryClients = deliveryClientOrderList;
                    }
                }
            }

            return route;
        }

        function getDeliveryClients(refundClients, clients){
            let deliveryClients = [];

            if(refundClients != null){
                    for(let j = 0; j < clients.length; j++){
                        if(!containsObject(clients[j], refundClients))
                            deliveryClients.push(clients[j]);
                    }         
                }
            
            return deliveryClients;
        }

        function buildRouteFromDepotToDepot(depo, deliveryClients, refundClients){
            let route = [];
            route.push(depo);

            for(let i = 0; i < deliveryClients.length; i++)
                route.push(deliveryClients[i]);

            for(let i = 0; i < refundClients.length; i++)
                route.push(refundClients[i]);  

            route.push(depo);
            return route;
        }

        function getRouteLength(points, distanceArray){
            let length = 0;
            for(let i = 0; i < points.length - 1; i++){
                length += getDistanceBetweenTwoPoint(points[i], points[i + 1], distanceArray);
            }
            return length;
        }

        function swapRandom(array) {
            if(array == null)
                return array;
            
            if (array.length <= 1) 
                return array;

            const index1 = Math.floor(Math.random() * array.length);
            let index2 = Math.floor(Math.random() * (array.length - 1)); 
            if (index2 === index1) {
                index2++; 
            }
            [array[index1], array[index2]] = [array[index2], array[index1]]; 

            return array;
        }

        function getDistanceBetweenTwoPoint(firstPoint, secondPoint, distanceArray)
        {
            return distanceArray[firstPoint.Index][secondPoint.Index];
        }

        function getRefundClients(clients){

            const randomnessNumber = 7;

            let randomClients = [];

            for (let i = 0; i < clients.length; i++) {
                const randomNumber = Math.floor(Math.random() * 10) + 1;
                if(randomNumber > randomnessNumber)
                    randomClients.push(clients[i]);
            }

            return randomClients;
        }    

        function polarCoordinates(origin, target) {
            const x = target.x - origin.x;
            const y = target.y - origin.y;
            const distance = Math.sqrt(x * x + y * y);
            let angle = Math.atan2(y, x);
            if (angle < 0) {
                angle += 2 * Math.PI;
            }
            return { distance, angle };
        }

        // Функция для распределения клиентов по транспортным средствам
        function distributeClients(clients, maxCapacity, depot) {

            clients.sort((a, b) => {
                const aAngle = Math.atan2(a.Longitude - depot.Longitude, a.Latitude - depot.Latitude);
                const bAngle = Math.atan2(b.Longitude - depot.Longitude, b.Latitude - depot.Latitude);
                if (aAngle === bAngle) {
                return Math.hypot(a.Longitude - depot.Longitude, a.Latitude - depot.Latitude) - Math.hypot(b.Longitude - depot.Longitude, b.Latitude - depot.Latitude);
                }
                return aAngle - bAngle;
            });     
            
            let vehicles = [];

            let currentCapacity = 0;

            let currentVehicle = null;

            for(let i = 0; i < clients.length; i++){
                if(currentCapacity - clients[i].ProductWeight < 0)
                {
                    var vehicle = {
                    Depot: depot,
                    Clients: [],
                    Capacity: maxCapacity
                    };

                    currentVehicle = vehicle;
                    vehicles.push(currentVehicle);
                    currentCapacity = maxCapacity;
                }

                if(currentCapacity - clients[i].ProductWeight > 0)
                {
                    currentVehicle.Clients.push(clients[i]);
                    currentCapacity -= clients[i].ProductWeight;
                }
            }
            
            return vehicles;
        }

        function fillDistanceArray() {
                return new Promise((resolve, reject) => {
                
                let distanceArray = []

                for(let i = 0; i < points.length; ++i){
                    distanceArray.push([])
                    for(let j = 0; j < points.length; ++j){
                      distanceArray[i].push(0)
                    }
                  }

                let allCount = 0;

                let doneCount = 0;
            
                for(let i = 0; i < points.length; i++){
                    for (let j = i; j < points.length; j++) {
                        if (i != j){
                            let multiRoute = new ymaps.multiRouter.MultiRoute({
                                referencePoints: [points[i].Mark.geometry.getCoordinates(), points[j].Mark.geometry.getCoordinates()],
                                    params: {
                                    routingMode: "auto",
                                    multiRoute: false  
                                    }
                                })

                                allCount++;   

                                multiRoute.model.events.add('requestsuccess',() => {
                                    doneCount++;
                                    var activeRoute = multiRoute.getActiveRoute();                                
                                    let val = activeRoute.properties.get("distance").value
                                    distanceArray[i][j] = val
                                    distanceArray[j][i] = val
                                    if(allCount === doneCount)
                                        resolve(distanceArray)
                                })                                                    
                            }
                        }
                }
                })
                
            }
        } 

        

       
</script>